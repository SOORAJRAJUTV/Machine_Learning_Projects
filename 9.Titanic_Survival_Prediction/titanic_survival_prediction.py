# -*- coding: utf-8 -*-
"""Titanic Survival prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OClpp3gJ9Bhc2QljcoGEl8ubu8nM3zZm
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c titanic

from zipfile import ZipFile
dataset = '/content/titanic.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('Done')

titanic_dataset = pd.read_csv('/content/train.csv')

titanic_dataset.head()

titanic_dataset.shape

titanic_dataset['Survived'].value_counts()

sns.set()

sns.countplot( x = 'Survived' , data=titanic_dataset)

titanic_dataset['Sex'].value_counts()

sns.countplot(x='Sex',hue = 'Survived' ,data = titanic_dataset, palette='Set2')

titanic_dataset['Pclass'].value_counts()

sns.countplot( x= 'Pclass', data=titanic_dataset, hue='Pclass')

sns.countplot(x='Pclass', hue='Survived', data=titanic_dataset, palette='Set1')

titanic_dataset.isnull().sum()

titanic_dataset.drop(columns='Cabin', axis = 1,inplace = True)

titanic_dataset['Age'].fillna( titanic_dataset['Age'].mean(), inplace= True )

titanic_dataset['Embarked'].value_counts()

print( titanic_dataset['Embarked'].mode() )

print( titanic_dataset['Embarked'].mode()[0] )

titanic_dataset['Embarked'].fillna( titanic_dataset['Embarked'].mode()[0], inplace = True )

titanic_dataset.isnull().sum()

titanic_dataset.replace( { 'Sex' : { 'male' : 0 , 'female' : 1},
                           'Embarked' : { 'S' : 0 , 'C': 1, 'Q' : 2} },
                            inplace = True )

titanic_dataset.head()

titanic_dataset['Embarked'].value_counts()

X = titanic_dataset.drop(columns = ['PassengerId','Name','Ticket','Survived'], axis = 1)
Y = titanic_dataset['Survived']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2, stratify= Y)

print(X.shape, X_train.shape, X_test.shape)

#from sklearn.ensemble import RandomForestClassifier

model = LogisticRegression(max_iter = 1000)
#model = RandomForestClassifier()
model.fit(X_train,Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)
print('Accuracy of training data', round(training_data_accuracy*100,2))

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)
print('Accuracy of test data', round(test_data_accuracy*100,2))

