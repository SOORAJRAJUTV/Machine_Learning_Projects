# -*- coding: utf-8 -*-
"""Car Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XpHtzxg4gDb6VLBpZYr5YCJjMsTC6PMe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.linear_model import Lasso

dataset = pd.read_csv('/content/car_details.csv')

dataset.head()

dataset.shape

dataset.isnull().sum()

print(dataset['fuel'].value_counts())

print(dataset['seller_type'].value_counts())

print(dataset['transmission'].value_counts())

"""**Label Encoding**"""

print(dataset['owner'].value_counts())

dataset.replace({ 'fuel' : { 'Diesel': 0, 'Petrol': 1, 'CNG': 2, 'LPG': 3, 'Electric':4 },
                   'seller_type': {'Individual' : 0, 'Dealer':1, 'Trustmark Dealer':2 },
                   'transmission': { 'Manual':0, 'Automatic':1 },
                   'owner': { 'First Owner':0, 'Second Owner':1, 'Third Owner':2, 'Fourth & Above Owner':3, 'Test Drive Car':4 }
                  }, inplace= True)

dataset.head()

X = dataset.drop(['name','selling_price'],axis=1)
Y = dataset['selling_price']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

training_data_prediction = lin_reg_model.predict(X_train)

error_score = metrics.r2_score(Y_train,training_data_prediction)
print(" R squared error for linear reg",error_score)

test_data_prediction = lin_reg_model.predict(X_test)

error_score = metrics.r2_score(Y_test,test_data_prediction)
print(" R squared error fro linear",error_score)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

lasso_reg_model = Lasso()

lasso_reg_model.fit(X_train,Y_train)

training_data_prediction = lasso_reg_model.predict(X_train)

error_score = metrics.r2_score(Y_train,training_data_prediction)
print(" R squared error for lasso reg",error_score)

test_data_prediction = lasso_reg_model.predict(X_test)

error_score = metrics.r2_score(Y_test,test_data_prediction)
print(" R squared error for lasso reg",error_score)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()