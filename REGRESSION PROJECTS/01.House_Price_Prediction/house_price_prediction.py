# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19yzutlmxVy9Y_7yK8I_SMzJUSbJzNrbe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn import metrics
from xgboost import XGBRegressor
from sklearn.preprocessing import StandardScaler

dataset = sklearn.datasets.fetch_california_housing()
print(dataset)

house_data = pd.DataFrame( dataset.data, columns=dataset.feature_names )

house_data.head()

house_data.to_csv('house_price.csv')

house_data.shape

house_data.isnull().sum()

house_data['price'] = dataset.target
house_data.head()

correlation = house_data.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', cmap='Blues', annot=True, annot_kws={'size':8})

X = house_data.drop(columns='price',axis=1)
Y = house_data['price']

print(X)
print(Y)

#X = np.asarray(X)
#Y = np.asarray(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print(X.shape,X_train.shape,X_test.shape)

model = XGBRegressor()

model.fit(X_train,Y_train)
training_data_prediction = model.predict(X_train)

for i in range(2):
  print(training_data_prediction,Y_train)

score_1 = metrics.r2_score(Y_train,training_data_prediction)

score_2 = metrics.mean_absolute_error(Y_train,training_data_prediction)

# For best model r suared error and mae must be very close to 0
print('R squared error:',score_1)
print('Mean Absolute error',score_2)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price vs Predicted Price')
plt.show()

#input_data = (2.775,52.0,5.9395770392749245,1.0483383685800605,793.0,2.395770392749245,37.85,-122.27)
i = 81
input_data = X.iloc[i].values

input_data = pd.DataFrame([input_data], columns=X.columns)

std_data = scaler.transform(input_data)

prediction = model.predict(std_data)

print( f"Actual price: ${house_data.iloc[i][8] * 100000:.2f}")

print( f"Predicted price : ${prediction[0] * 100000: .2f}")

