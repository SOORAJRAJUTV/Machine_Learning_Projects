# -*- coding: utf-8 -*-
"""Credit card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WiDMDeMdbQtHJTkH9b2N82Aa0g4QsNXf
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

credit_dataset = pd.read_csv('/content/creditcard.csv')

credit_dataset.head()

credit_dataset.shape

credit_dataset.info()

credit_dataset['Class'].value_counts()

legit = credit_dataset[credit_dataset['Class'] ==0]
fraud = credit_dataset[credit_dataset['Class'] ==1]

legit.shape

fraud.shape

#fraud = np.asarray(fraud)
#print(fraud[0])

"""**Under** **Sampling**"""

legit_sample = legit.sample(n=492)
legit_sample.shape

new_data = pd.concat([legit_sample,fraud],axis=0)
new_data.head()

new_data['Class'].value_counts()

X = new_data.drop(columns='Class',axis=1)
Y = new_data['Class']

print(X)
print(Y)

X = np.asarray(X)
Y = np.asarray(Y)



X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size=0.2, random_state=2, stratify=Y)

print(X.shape, X_train.shape, X_test.shape)

model = LogisticRegression(max_iter = 1000)
#model = RandomForestClassifier()
model.fit(X_train,Y_train)

training_data_prediction = model.predict(X_train)
training_accuracy = accuracy_score(Y_train,training_data_prediction)
print('Accuracy score of training data',round(training_accuracy*100,2))

test_data_prediction = model.predict(X_test)
test_accuracy = accuracy_score(Y_test,test_data_prediction)
print('Accuracy score of test data',round(test_accuracy*100,2))

input_data = ( 4.06000000e+02, -2.31222654e+00,  1.95199201e+00 ,-1.60985073e+00,
  3.99790559e+00, -5.22187865e-01, -1.42654532e+00, -2.53738731e+00,
  1.39165725e+00, -2.77008928e+00, -2.77227214e+00,  3.20203321e+00,
 -2.89990739e+00 ,-5.95221881e-01, -4.28925378e+00,  3.89724120e-01,
 -1.14074718e+00 ,-2.83005567e+00, -1.68224682e-02,  4.16955705e-01,
  1.26910559e-01  ,5.17232371e-01, -3.50493686e-02, -4.65211076e-01,
  3.20198199e-01  ,4.45191675e-02,  1.77839798e-01,  2.61145003e-01,
 -1.43275875e-01  ,0.00000000e+00)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

if(prediction[0]==0):
  print('The transaction is Legit')
else:
  print('The transaction is Fraudulent')

