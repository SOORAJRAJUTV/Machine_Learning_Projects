# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L4Q4I2GffBKVgCYR83Xv6QeOGjCoRneL
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

X = np.asarray(X)
Y = np.asarray(Y)

scaler = StandardScaler()

scaler.fit(X)
standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.1, stratify=Y, random_state=3)

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

print(X_train)
print(Y_train)

model = SVC(kernel='rbf')

model.fit(X_train,Y_train)

training_prediction = model.predict(X_train)
training_accuracy = accuracy_score(Y_train,training_prediction)
print('Training data accuracy',training_accuracy)

test_prediction = model.predict(X_test)
test_accuracy = accuracy_score(Y_test,test_prediction)
print('Test data accuracy',test_accuracy)

input_data = (4,110,92,0,0,37.6,0.191,30)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
prediction = model.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print('Non Diabetic')
else:
  print('Diabetic')

