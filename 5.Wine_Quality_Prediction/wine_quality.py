# -*- coding: utf-8 -*-
"""Wine_Quality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/198bfT0DZev84l-01GwUWxlb0Afc3eYyy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

dataset = pd.read_csv('/content/winequality-red.csv')

dataset.head()

dataset.isnull().sum()

dataset.size

dataset.shape

sns.catplot(x='quality',data=dataset,kind='count')

plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='alcohol',hue='quality',data=dataset,palette='Set1')

plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality',hue='quality',y='citric acid',data=dataset,palette='Set2')

plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='volatile acidity',hue='quality',data=dataset,palette='Set3')

correlation = dataset.corr()

plot = plt.figure(figsize=(7,7))
sns.heatmap(correlation,cbar=True,cmap='Blues',annot=True,fmt='.1f',annot_kws={'size':8})

dataset['quality'].value_counts()

"""**Label Binarization**"""

dataset['quality'] = dataset['quality'].apply( lambda value_y : 1 if value_y >=7 else 0 )

dataset['quality'].value_counts()

"""0 --> Bad Quality

1 --> Good Quality
"""

X = dataset.drop(columns ='quality',axis=1)
Y = dataset['quality']

print(X)

print(Y)

X = np.array(X)
Y = np.array(Y)

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state = 2, stratify=Y)

print(X.shape, X_train.shape,X_test.shape)

model = RandomForestClassifier()

model.fit(X_train,Y_train)
training_data_prediction = model.predict(X_train)
training_accuracy = accuracy_score(Y_train,training_data_prediction)
print(training_accuracy*100)

test_data_prediction = model.predict(X_test)
test_accuracy = accuracy_score(Y_test,test_data_prediction)
print(test_accuracy*100)

input_data = (7.3,0.65,0.0,1.2,0.065,15.0,21.0,0.9946,3.39,0.47,10.0	)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

if(prediction[0]==0):
  print('Bad Quality Wine')
else:
  print('Good Quality Wine')

