# -*- coding: utf-8 -*-
"""Fake_News_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t1S7r7oqniny4ou8938DJFjqFtdHerL4
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.head()

news_dataset.shape

news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

news_dataset.head()

print(news_dataset['content'])

news_dataset.isnull().sum()

news_dataset['label'].value_counts()

news_dataset = news_dataset.fillna('')

ps = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [ps.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

vectorizer = TfidfVectorizer()
vectorizer.fit(X)
X = vectorizer.transform(X)

print(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2, stratify=Y)

print(X.shape,X_train.shape,X_test.shape)

model = LogisticRegression()
model.fit(X_train,Y_train)

training_data_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(training_data_prediction,Y_train)
print('Accuracy score of training data',training_data_accuracy*100)

test_data_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(test_data_prediction,Y_test)
print('Accuracy score of test data',test_data_accuracy*100)

i = 29

input_data = (X_test[i])
prediction = model.predict(input_data)
print(prediction)
print(Y_test[i])
if(prediction[0] == 0):
  print('The news is Real')
else:
  print('The news is Fake')

