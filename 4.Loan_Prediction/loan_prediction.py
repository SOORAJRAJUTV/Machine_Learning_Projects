# -*- coding: utf-8 -*-
"""Loan_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQ3FPyiJ-oIKRmNdQ-ygnUPxLr9YkQ_Q
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

dataset = pd.read_csv('/content/Loan_prediction.csv')

dataset.head()

dataset.shape

dataset.isnull().sum()

dataset = dataset.dropna()

dataset.isnull().sum()

dataset.head()

dataset.replace( {"Loan_Status" : { 'N':0, 'Y':1 } } , inplace= True )

dataset.head()

dataset['Dependents'].value_counts()

dataset = dataset.replace(to_replace = '3+', value= 4 )

dataset['Dependents'].value_counts()

sns.countplot(x='Education',hue='Loan_Status', data = dataset)

sns.countplot(x='Married',hue='Loan_Status',data = dataset)

"""converting categorical columns to numerical values

"""

dataset.replace( { "Gender" : { 'Male' : 1, 'Female': 0 }, "Married" : { 'Yes': 1, 'No': 0} ,  "Education" : { 'Graduate' : 1, 'Not Graduate': 0} , "Self_Employed" : { 'Yes': 1, 'No': 0} ,
                   "Property_Area" : { 'Rural' : 0, 'Semiurban': 1, 'Urban': 2 } }, inplace= True )

dataset.head()

X = dataset.drop(columns = ['Loan_ID','Loan_Status'], axis = 1)
Y = dataset['Loan_Status']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, stratify= Y, test_size = 0.2, random_state = 2)

classifier = SVC( kernel= 'linear' )

classifier.fit(X_train,Y_train)

training_data_prediction = classifier.predict(X_train)
training_accuracy = accuracy_score(Y_train,training_data_prediction)
print(round(training_accuracy*100,2),"%")

test_data_prediction = classifier.predict(X_test)
test_accuracy = accuracy_score(Y_test,test_data_prediction)
print(test_accuracy*100,"%")

input_data = (1,	1,	0,	1,	1,	3000,	0.0,	66.0,	360.0,	1.0,	2		)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)

if(prediction[0]==0):
  print('Loan will not be approved')
else:
  print('Loan will be approved')

